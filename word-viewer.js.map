{"version":3,"file":"word-viewer.js","sourceRoot":"","sources":["src/word-viewer.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,GAAG,EAAC,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAGnE,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,UAAU;IAA1C;;QAiBqB,QAAG,GAAG,CAAC,CAAC;QACR,kBAAa,GAAG,CAAC,CAAC;QAEvB,UAAK,GAAW,EAAE,CAAC;QAsB/B,mBAAc,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAE3D,wBAAmB,GAAG,GAAG,EAAE;YACvB,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAA;IACL,CAAC;IAvBY,iBAAiB;QACtB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IACvE,CAAC;IAEQ,oBAAoB;QACzB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;IACnC,CAAC;IACQ,MAAM;QACX,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,IAAI,CAAA;qBACE,IAAI,CAAC,mBAAmB;qBACxB,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,CAAC;eACxD,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC;IACxG,CAAC;CAOJ,CAAA;AA9CmB,iBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;KAe1B,CAAA;AACO;IAAR,KAAK,EAAE;uCAAiB;AAChB;IAAR,KAAK,EAAE;iDAA2B;AAEvB;IAAX,QAAQ,EAAE;yCAAoB;AApBtB,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CA+CtB;SA/CY,UAAU","sourcesContent":["import { css,html, LitElement } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement, property, state } from 'lit/decorators.js';\n\n@customElement('word-viewer')\nexport class WordViewer extends LitElement {\n    static override styles = css`\n        :host {\n            display: flex;\n            justify-content: center;\n            color: violet;\n            font-size: 40px;\n            cursor: pointer;\n        }\n        pre {\n            padding: 0.2em;\n            margin-top: 10em;\n        }\n        .backwards {\n            color: red;\n        }\n    `;\n    @state() private idx = 0;\n    @state() private playDirection = 1;\n\n    @property() words: string = '';\n\n    private intervalTimer?: number;\n\n    override connectedCallback() {\n        super.connectedCallback();\n        this.intervalTimer = window.setInterval(this.tickToNextWord, 1000);\n    }\n\n    override disconnectedCallback() {\n        super.disconnectedCallback();\n        clearInterval(this.intervalTimer);\n        this.intervalTimer = undefined;\n    }\n    override render() {\n        const splitWords = this.words.split('.');\n        return html`<pre \n            @click=${this.switchPlayDirection}\n            class=\"${classMap({ backwards: this.playDirection === -1 })}\"\n            >${splitWords[((this.idx % splitWords.length) + splitWords.length) % splitWords.length]}</pre>`;\n    }\n\n    tickToNextWord = () => { this.idx += this.playDirection; };\n\n    switchPlayDirection = () => {\n        this.playDirection *= -1;\n    }\n}"]}