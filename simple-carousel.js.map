{"version":3,"file":"simple-carousel.js","sourceRoot":"","sources":["src/simple-carousel.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from \"lit\";\nimport { customElement, property, queryAssignedElements, state } from \"lit/decorators.js\";\nimport {\n    AnimationTuple,\n    SLIDE_LEFT_IN,\n    SLIDE_LEFT_OUT,\n    SLIDE_RIGHT_IN,\n    SLIDE_RIGHT_OUT,\n    BOOTSTRAP_CHEVRON_LEFT,\n    BOOTSTRAP_CHEVRON_RIGHT,\n} from \"./constants.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport './slide-button'\n\n@customElement('simple-carousel')\nexport class SimpleCarousel extends LitElement {\n    static override styles = css`\n        ::slotted(.slide-hidden) {\n            display: none;\n        }\n        /** So the elements all overlap */\n        ::slotted(*) {\n            position: absolute;\n            padding: 1em;\n        }\n        :host {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n        }\n        #container {\n            border-radius: 24px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex: 1;\n            margin: 0 18px;\n            padding: 1em;\n            overflow: hidden;\n            position: relative;\n            box-shadow: var(--shadow, gray) 0.3em 0.3em 0.4em,\n                        var(--highlight, white) -0.1em -0.1em 0.3em;\n        }\n    `;\n    @state() private containerHeight = 0;\n    @property({ type: Number }) slideIndex = 0\n\n    @queryAssignedElements()\n    private readonly slideElements!: HTMLElement[];\n\n    override render() {\n        const containerStyles = {\n            height: `${this.containerHeight}px`\n        };\n        return html`\n            <slide-button\n              @click=${this.navigateToPrevSlide}>\n                ${BOOTSTRAP_CHEVRON_LEFT}\n            </slide-button>\n            <div id=\"container\"\n              style=\"${styleMap(containerStyles)}\">\n                <slot></slot>\n            </div>\n            <slide-button\n              @click=${this.navigateToNextSlide}>\n                ${BOOTSTRAP_CHEVRON_RIGHT}\n            </slide-button>\n        `;\n    }\n\n    override firstUpdated() {\n        this.containerHeight = getMaxElHeight(this.slideElements);\n        this.initializeSlide();\n    }\n    private initializeSlide() {\n        for (let i = 0; i < this.slideElements.length; i++) {\n            if (i === this.slideIndex) {\n                showSlide(this.slideElements[i]);\n            } else {\n                hideSlide(this.slideElements[i]);\n            }\n        }\n    }\n    /** Changes current slide index by offset and wraps index */\n    private changeSlide(offset: number) {\n        const slideCount = this.slideElements.length;\n        this.slideIndex = (slideCount + ((this.slideIndex + offset) % slideCount)) % slideCount;\n    }\n    navigateToNextSlide = () => {\n        this.navigateWithAnimation(1, SLIDE_LEFT_OUT, SLIDE_RIGHT_IN);\n    }\n    navigateToPrevSlide = () => {\n        this.navigateWithAnimation(-1, SLIDE_RIGHT_OUT, SLIDE_LEFT_IN);\n    }\n    private async navigateWithAnimation(\n        nextSlideOffset: number,\n        leavingAnimation: AnimationTuple,\n        enteringAnimation: AnimationTuple\n    ) {\n        const elLeaving = this.slideElements[this.slideIndex];\n        const leavingAnim = elLeaving.animate(\n            leavingAnimation[0], \n            leavingAnimation[1]\n        );\n        // Change slide\n        this.changeSlide(nextSlideOffset);\n        const newSlideEl = this.slideElements[this.slideIndex];\n        // Show the new slide\n        showSlide(newSlideEl);\n        // Teleport it out of view and animate it in\n        const enteringAnim = newSlideEl.animate(\n            enteringAnimation[0],\n            enteringAnimation[1]\n        );\n        // Wait for animations\n        await Promise.all([leavingAnim.finished, enteringAnim.finished]);\n        // Hide the element that left\n        hideSlide(elLeaving);\n    }\n}\n\nfunction hideSlide(el: HTMLElement) {\n    el.classList.add('slide-hidden');\n}\n\nfunction showSlide(el: HTMLElement) {\n    el.classList.remove('slide-hidden');\n}\n\nfunction getMaxElHeight(els: HTMLElement[]): number {\n    return Math.max(0,\n        ...els.map(el => el.getBoundingClientRect().height));\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        \"simple-carousel\": SimpleCarousel;\n    }\n}\n\n"]}